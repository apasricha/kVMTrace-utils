README for ref_trace_reader
------

Authors: Aneesh Pasricha '16 Amherst College and Scott Kaplan, Professor at Amherst College
-------

Copyright: 2013
---------

ref_trace_reader.cc uses an input file generated by instrument.cc (see 'README for instrument.cc') using Bochs PC Emulator (version 2.6.2). It creates Human-readable output from that input file. 

Terminal/Console Usage:
---------------------- 
 Compile activating USE_32_BIT for 32-bit systems
 print on screen: ./ref_trace_reader < "input file"
 print to file: ./ref_trace_reader < "input file" > "output file"

Where "input file" is a text or data file containing, in such order, for each memory access:
Read/Write Operation Identifer               (1 byte char)
Virtual Page number of used memory address   (4 byte uint32_t or 8 byte uint64_t for 32- or 64-bit systems)
CPU Timestamp Counter at that memory access  (8 byte long long)
If NRU (see 'README for instrument.cc') contains no repitions of this page access, also, in continuing order:
Accessed page image/contents                 (4096 bytes)
If NRU was full, also, in continuing order:
Virtual Page Number of page leaving NRU      (4 byte uint32_t or 8 byte uint64_t for 32- or 64-bit systems) 
Leaving Page Image/Contents                  (4096 bytes)

And "output file" is the file to be written to. The screen (or the output file) will then contain, for each access:
Read/Write (read/write identifier) Incoming page Virtual Address: (incoming page virtual address) TSC: (CPU timestamp at access time) {If there exists no page with the same number as this one} Incoming 4KB page {If the NRU is full} Outgoing page Virtual Address: (outgoing page virtual address) Outgoing 4KB page

Here, the portions in () represent explain numbers/characters that will be displayed in their place. Portions in {} present a condition that must be fulfilled in order for the output to contain what, in the above, comes after those portions. Note that (read/write identifier) holds a 'r' or 'w' for read or write respectively. These will be replaced by 'R' and 'W' to signify an addition of used page to the NRU; and by 'Read' and 'Write' to signify removal and subsequent addition to the NRU.

Explanation of functions:
------------------------
main() reads the data file using fread and sets variables for each of the input elements described above. It does so by looping through until the end of the file while recording those variables. Using the read/write identifier provided by the input file (which is r,w ; R,W ; T,Q for the cases of no addition of page to NRU ; only addition to NRU ; addition with removal from NRU) it considers how many variables it is to read and the fread advances by the requisite number. Note that since we currently don't need to show page image we use fseek to jump over 4096 bytes whenever we encounter a page image. It calls recordData before accepting new variable values as the file continues and we enter a new access record. 

recordData(char, uint32_t/uint64_t, uint32_t/uint64_t, long long, int) accepts the variables recorded by main() as arguments and displays them as shown above (output) in a human-readable form. It uses a case-identifer int given by main() to determine how many variables it needs to show/print. 

Further information:
-------------------
Comments in the code explain this and much more.
 

-----END README----- 
   









